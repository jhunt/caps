#!/usr/bin/perl
use strict;
use warnings;

my @CAPS;
sub cap {
	my ($name, $num, %attrs) = @_;
	$attrs{name} = "CAP_".uc($name);
	$attrs{num}  = $num;
	$attrs{flag} = (1 << $num);
	push @CAPS, \%attrs;
}

cap(
  chown => 0,
  summary => 'Make arbitrary changes to file UIDs and GIDs',
);
cap(
  dac_override => 1,
  summary => 'Bypass file read, write, and execute permission checks.',
);
cap(
  dac_read_search => 2,
  summary => 'Bypass file read permission checks and directory read and execute permission checks.',
);
cap(
  fowner => 3,
  summary => 'Bypass file ownership / process owner equality permission checks.',
);
cap(
  fsetid => 4,
  summary => 'Don\'t clear set-user-ID and set-group-ID mode bits when a file is modified',
);
cap(
  kill => 5,
  summary => 'Bypass permission checks for sending signals.',
);
cap(
  setgid => 6,
  summary => 'Make arbitrary manipulations of process GIDs and supplementary GID list.',
);
cap(
  setuid => 7,
  summary => 'Make arbitrary manipulations of process UIDs.',
);
cap(
  setpcap => 8,
  summary => 'Manage capability sets (from bounded / inherited set).',
);
cap(
  linux_immutable => 9,
  summary => 'Set files to be immutable or append-only.',
);
cap(
  net_bind_service => 10,
  summary => 'Bind a socket to Internet domain privileged ports.',
);
cap(
  net_broadcast => 11,
  summary => 'Make socket broadcasts, and listen to multicasts.  DEPRECATED.',
);
cap(
  net_admin => 12,
  summary => 'Manage network configuration and interfaces (broad scope).',
);
cap(
  net_raw => 13,
  summary => 'Use RAW and PACKET sockets.',
);
cap(
  ipc_lock => 14,
  summary => 'Lock memory, via mlock(2) and friends.',
);
cap(
  ipc_owner => 15,
  summary => 'Bypass permission checks for operations on System V IPC objects.',
);
cap(
  sys_module => 16,
  summary => 'Load and unload kernel modules.',
);
cap(
  sys_rawio => 17,
  summary => 'Perform I/O port operations',
);
cap(
  sys_chroot => 18,
  summary => 'Use chroot(2) and manage kernel namespaces.',
);
cap(
  sys_ptrace => 19,
  summary => 'Trace arbitrary processes using ptrace.',
);
cap(
  sys_pacct => 20,
  summary => 'Use the acct(2) system call.',
);
cap(
  sys_admin => 21,
  summary => 'Basically be root again.  This is a HUGE scope.',
);
cap(
  sys_boot => 22,
  summary => 'Use the reboot(2) system call',
);
cap(
  sys_nice => 23,
  summary => 'Raise process nice value and change the nice value for arbitrary processes.',
);
cap(
  sys_resource => 24,
  summary => 'Manage resource limits on filesystems, ulimits, etc.',
);
cap(
  sys_time => 25,
  summary => 'Set the system clock and manage realtime clock(s).',
);
cap(
  sys_tty_config => 26,
  summary => 'Manage virtual teletype terminals and their settings.',
);
cap(
  mknod => 27,
  summary => 'Create special files using mknod(2).',
);
cap(
  lease => 28,
  summary => 'Establish leases on arbitrary files via fcntl(2).',
);
cap(
  audit_write => 29,
  summary => 'Write records to kernel auditing log.',
);
cap(
  audit_control => 30,
  summary => 'Manage kernel auditing.',
);
cap(
  setfcap => 31,
  summary => 'Set arbitrary capabilities on a file.',
);
cap(
  mac_override => 32,
  summary => 'Override Mandatory Access Control (MAC).  Implemented for the Smack LSM.',
);
cap(
  mac_admin => 33,
  summary => 'Allow MAC configuration or state changes.  Implemented for the Smack Linux Security Module (LSM).',
);
cap(
  syslog => 34,
  summary => 'Perform privileged syslog(2) operations.',
);
cap(
  wake_alarm => 35,
  summary => 'Trigger something that will wake up the system.',
);
cap(
  block_suspend => 36,
  summary => 'Employ features that can block system suspend.',
);
cap(
  audit_read => 37,
  summary => 'Allow reading the audit log via a multicast netlink socket.',
);

if ($ARGV[0]) {
  for my $raw (@ARGV) {
    my $n = do { no warnings; int(hex($raw)); };
    my $count = 0;
    for my $cap (@CAPS) {
      ++$count if $n & $cap->{flag};
    }
    print "$raw ($count):\n";
    for my $cap (@CAPS) {
      if ($n & $cap->{flag}) {
        printf "  %-20s  %2.1d (%#016x)", $cap->{name}, $cap->{num}, $cap->{flag};
        if ($cap->{summary}) {
          print "  $cap->{summary}";
        }
        print "\n";
      }
    }
    print "\n";
  }
  exit 0;
}
